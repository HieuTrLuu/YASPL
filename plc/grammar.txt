Prog :: Sect Prog | Sect
Sect :: start {Block} | end {Block} | Nat {Block} | Nat-Nat {Block} | Nat+ {Block} | String {Block}
Block :: Statement\n Block | Statement
Statement :: Assignment | return Expr
Assignment :: String [+|-|*|/]= Expr | String ++ | String --
Expr :: Int | Float | True | False | [Conts] | (Conts) | $Nat | Expr + Expr |
        Expr - Expr | Expr * Expr | Expr / Expr | Expr % Expr | Expr:Expr | Expr ++ Expr |
        (Expr) | if Expr then Expr else Expr | \String -> Expr | Expr <[=] Expr |
        Expr >[=] Expr | Expr == Expr | String Args | Expr !! Expr | {Expr | Expr}
Conts :: e | Expr | Expr, Conts
Args :: e | Expr | Expr Args

lam
string
ident
int
float
true
false
return
if
then
else

'+'
'-'
'*'
'/'
'%'
'='
'<'
'>'
'('
')'
'['
']'
'{'
'}'
':'
'|'
'!'
','

Prog [
  ("init", [
      Def "acc" (Int_ 0),
      Def "fib" (List [(Int_ 1),(Int_ 1)]),
      Def "seen" (List [])
  ]),
  ("0-1", [
    Return (Ident 0),
    Def "seen" (Cons seen (Ident 0))
  ]),
  ("2+", [
    Def "seen" (Cons seen (Ident 0)),
    Def "x" (Fun "zip" [seen, Fun "reverse" [fib]]),
    Def "x" (Comp (Mult (Var "a") (Var "b")) (Member (Pair (Var "a") ("Var b")) (Var "x"))),
    
  ])
]

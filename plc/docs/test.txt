
("fib",List [Int_ 1,Int_ 1]),

("seen",List []),
("seen",Cons (Var "seen") (Ident 0)),
("seen",Cons (Var "seen") (Ident 0)),

("x",App (App (Var "zip") (Var "seen")) (App (Var "reverse") (Var "fib"))),
("x",Comp (Mult (Var "a") (Var "b")) [Member (Pair (Var "a") (Var "b")) (Var "x")]),

("a",App (Var "last") (Var "fibs")),
("b",App (Var "head") (App (Var "tail") (App (Var "reverse") (Var "fib")))),

("fib",Cons (Var "fib") (Add (Var "a") (Var "b")))
Assign (Def "y" (Comp (Var "z") [Member (Var "z") (List [Int_ 1,Int_ 2,Int_ 3]),Prop (Equal (Var "z") (Int_ 1))]))])

prog :: Prog
prog = [("start",[Assign (Def "last" (App (App (Lam "x" (Lam "y" (Add (Add (Var "x") (Var "y")) (Int_ 10)))) (Int_ 1)) (Int_ 11)))])]
Prog :: Sect Prog | Sect
Sect :: start {Block} | end {Block} | Nat {Block} | Nat-Nat {Block} | Nat+ {Block} | String {Block}
Block :: Statement\n Block | Statement
Statement :: Assignment | return Expr
Assignment :: String [+|-|*|/]= Expr | String ++ | String --
Expr :: Int | Float | True | False | [Conts] | (Conts) | $Nat | Expr + Expr |
        Expr - Expr | Expr * Expr | Expr / Expr | Expr % Expr | Expr:Expr | Expr ++ Expr |
        (Expr) | if Expr then Expr else Expr | \String -> Expr | Expr <[=] Expr |
        Expr >[=] Expr | Expr == Expr | String Args | Expr !! Expr | {Expr | Expr}
Conts :: e | Expr | Expr, Conts
Args :: e | Expr | Expr Args

lam
string
ident
int
float
true
false
return
if
then
else

'+'
'-'
'*'
'/'
'%'
'='
'<'
'>'
'('
')'
'['
']'
'{'
'}'
':'
'|'
'!'
','

[
  ("start", [
      Assign (Def "fib" (List [(Int_ 1),(Int_ 1)])),
      Assign (Def "seen" (List []))
  ]),
  ("0-1", [
    Return (Ident 0),
    Assign (Def "seen" (Cons (Var "seen") (Ident 0)))
  ]),
  ("2+", [
    Assign (Def "seen" (Cons (Var "seen") (Ident 0))),
    Assign (Def "x" (App (Var "zip") (App (Var "seen") (App (Var "reverse") (Var "fib"))))),
    Assign (Def "x" (Comp (Mult (Var "a") (Var "b")) [Member (Pair (Var "a") (Var "b")) (Var "x")])),
    Return (App (Var "sum") (Var "x")),
    Assign (Def "a" (App (Var "last") (Var "fibs"))),
    Assign (Def "b" (App (Var "head") (App (Var "tail") (App (Var "reverse") (Var "fib"))))),
    Assign (Def "fib" (Cons (Var "fib") (Add (Var "a") (Var "b"))))
  ])
]

[
  ("start",[
    Assign (Def "fib" (List [Int_ 1,Int_ 1])),
    Assign (Def "seen" (List []))
  ]),
  ("0-1",[
  Return [Ident 0],
  Assign (Def "seen" (Cons (Var "seen") (Ident 0)))
  ]),
  ("2+",[
  Assign (Def "seen" (Cons (Var "seen") (Ident 0))),
  Assign (Def "x" (App (App (Var "zip") (Var "seen")) (App (Var "reverse") (Var "fib")))),
  Assign (Def "x" (Comp (Mult (Var "a") (Var "b")) [Member (Pair (Var "a") (Var "b")) (Var "x")])),
  Return [App (Var "sum") (Var "x")],
  Assign (Def "a" (App (Var "last") (Var "fibs"))),
  Assign (Def "b" (App (Var "head") (App (Var "tail") (App (Var "reverse") (Var "fib"))))),
  Assign (Def "fib" (Cons (Var "fib") (Add (Var "a") (Var "b"))))
  ])
]

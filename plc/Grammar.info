-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from Grammar.y
-----------------------------------------------------------------------------

state 15 contains 1 shift/reduce conflicts.
state 18 contains 1 shift/reduce conflicts.
state 19 contains 1 shift/reduce conflicts.
state 33 contains 1 shift/reduce conflicts.

terminal for is unused
terminal in is unused
terminal '>' is unused
terminal '-' is unused
terminal '*' is unused
terminal '=' is unused
terminal ';' is unused
terminal '[' is unused
terminal ']' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseLang -> Exp                            (0)
	Exp -> int                                         (1)
	Exp -> var                                         (2)
	Exp -> stream                                      (3)
	Exp -> true                                        (4)
	Exp -> false                                       (5)
	Exp -> '(' ')'                                     (6)
	Exp -> Exp '<' Exp                                 (7)
	Exp -> Exp '+' Exp                                 (8)
	Exp -> if Exp '{' Exp '}' else '{' Exp '}'         (9)
	Exp -> lam '(' var ':' Type ')' Exp                (10)
	Exp -> Exp Exp                                     (11)
	Exp -> '(' Exp ')'                                 (12)
	Type -> bool                                       (13)
	Type -> int                                        (14)
	Type -> stream                                     (15)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	':'            { TokenHasType _ }
	var            { TokenVar _ $$ }
	bool           { TokenTypeBool _ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	stream         { TokenStream _ $$ }
	int            { TokenInt _ $$ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	for            { TokemFor _ }
	in             { TokenIn _ }
	lam            { TokenLambda _ }
	'>'            { TokenGreater _ }
	'<'            { TokenLess _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenMult _ }
	'='            { TokenEq _ }
	';'            { TokenEOL _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLParenSquare _ }
	']'            { TokenRParenSquare _ }
	'{'            { TokenLParenCurly _ }
	'}'            { TokenRParenCurly _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseLang rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
	Type            rules 13, 14, 15

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 3

State 1


	int            shift, and enter state 2


State 2

	Exp -> int .                                        (rule 1)

	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	stream         reduce using rule 1
	int            reduce using rule 1
	if             reduce using rule 1
	lam            reduce using rule 1
	'<'            reduce using rule 1
	'+'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseLang -> Exp .                           (rule 0)
	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	%eof           accept

	Exp            goto state 15

State 4

	Exp -> var .                                        (rule 2)

	var            reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	stream         reduce using rule 2
	int            reduce using rule 2
	if             reduce using rule 2
	lam            reduce using rule 2
	'<'            reduce using rule 2
	'+'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 5

	Exp -> true .                                       (rule 4)

	var            reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	stream         reduce using rule 4
	int            reduce using rule 4
	if             reduce using rule 4
	lam            reduce using rule 4
	'<'            reduce using rule 4
	'+'            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	Exp -> false .                                      (rule 5)

	var            reduce using rule 5
	true           reduce using rule 5
	false          reduce using rule 5
	stream         reduce using rule 5
	int            reduce using rule 5
	if             reduce using rule 5
	lam            reduce using rule 5
	'<'            reduce using rule 5
	'+'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	Exp -> stream .                                     (rule 3)

	var            reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	stream         reduce using rule 3
	int            reduce using rule 3
	if             reduce using rule 3
	lam            reduce using rule 3
	'<'            reduce using rule 3
	'+'            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	%eof           reduce using rule 3


State 8

	Exp -> if . Exp '{' Exp '}' else '{' Exp '}'        (rule 9)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 14

State 9

	Exp -> lam . '(' var ':' Type ')' Exp               (rule 10)

	'('            shift, and enter state 13


State 10

	Exp -> '(' . ')'                                    (rule 6)
	Exp -> '(' . Exp ')'                                (rule 12)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10
	')'            shift, and enter state 12

	Exp            goto state 11

State 11

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> '(' Exp . ')'                                (rule 12)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	')'            shift, and enter state 22

	Exp            goto state 15

State 12

	Exp -> '(' ')' .                                    (rule 6)

	var            reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	stream         reduce using rule 6
	int            reduce using rule 6
	if             reduce using rule 6
	lam            reduce using rule 6
	'<'            reduce using rule 6
	'+'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	%eof           reduce using rule 6


State 13

	Exp -> lam '(' . var ':' Type ')' Exp               (rule 10)

	var            shift, and enter state 21


State 14

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> if Exp . '{' Exp '}' else '{' Exp '}'        (rule 9)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	'{'            shift, and enter state 20

	Exp            goto state 15

State 15

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp Exp .                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
			(reduce using rule 11)

	int            shift, and enter state 2
	if             reduce using rule 11
	lam            reduce using rule 11
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11

	Exp            goto state 15

State 16

	Exp -> Exp '<' . Exp                                (rule 7)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 19

State 17

	Exp -> Exp '+' . Exp                                (rule 8)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 18

State 18

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> Exp '+' Exp .                                (rule 8)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
			(reduce using rule 8)

	int            shift, and enter state 2
	if             reduce using rule 8
	lam            reduce using rule 8
	'<'            reduce using rule 8
	'+'            reduce using rule 8
	'('            shift, and enter state 10
	')'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	%eof           reduce using rule 8

	Exp            goto state 15

State 19

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp '<' Exp .                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
			(reduce using rule 7)

	int            shift, and enter state 2
	if             reduce using rule 7
	lam            reduce using rule 7
	'<'            reduce using rule 7
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	')'            reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	%eof           reduce using rule 7

	Exp            goto state 15

State 20

	Exp -> if Exp '{' . Exp '}' else '{' Exp '}'        (rule 9)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 24

State 21

	Exp -> lam '(' var . ':' Type ')' Exp               (rule 10)

	':'            shift, and enter state 23


State 22

	Exp -> '(' Exp ')' .                                (rule 12)

	var            reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	stream         reduce using rule 12
	int            reduce using rule 12
	if             reduce using rule 12
	lam            reduce using rule 12
	'<'            reduce using rule 12
	'+'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 23

	Exp -> lam '(' var ':' . Type ')' Exp               (rule 10)

	bool           shift, and enter state 27
	stream         shift, and enter state 28
	int            shift, and enter state 29

	Type           goto state 26

State 24

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> if Exp '{' Exp . '}' else '{' Exp '}'        (rule 9)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	'}'            shift, and enter state 25

	Exp            goto state 15

State 25

	Exp -> if Exp '{' Exp '}' . else '{' Exp '}'        (rule 9)

	else           shift, and enter state 31


State 26

	Exp -> lam '(' var ':' Type . ')' Exp               (rule 10)

	')'            shift, and enter state 30


State 27

	Type -> bool .                                      (rule 13)

	')'            reduce using rule 13


State 28

	Type -> stream .                                    (rule 15)

	')'            reduce using rule 15


State 29

	Type -> int .                                       (rule 14)

	')'            reduce using rule 14


State 30

	Exp -> lam '(' var ':' Type ')' . Exp               (rule 10)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 33

State 31

	Exp -> if Exp '{' Exp '}' else . '{' Exp '}'        (rule 9)

	'{'            shift, and enter state 32


State 32

	Exp -> if Exp '{' Exp '}' else '{' . Exp '}'        (rule 9)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'('            shift, and enter state 10

	Exp            goto state 34

State 33

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> lam '(' var ':' Type ')' Exp .               (rule 10)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
			(reduce using rule 10)

	int            shift, and enter state 2
	if             reduce using rule 10
	lam            reduce using rule 10
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10

	Exp            goto state 15

State 34

	Exp -> Exp . '<' Exp                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 8)
	Exp -> if Exp '{' Exp '}' else '{' Exp . '}'        (rule 9)
	Exp -> Exp . Exp                                    (rule 11)

	var            shift, and enter state 4
	true           shift, and enter state 5
	false          shift, and enter state 6
	stream         shift, and enter state 7
	int            shift, and enter state 2
	if             shift, and enter state 8
	lam            shift, and enter state 9
	'<'            shift, and enter state 16
	'+'            shift, and enter state 17
	'('            shift, and enter state 10
	'}'            shift, and enter state 35

	Exp            goto state 15

State 35

	Exp -> if Exp '{' Exp '}' else '{' Exp '}' .        (rule 9)

	var            reduce using rule 9
	true           reduce using rule 9
	false          reduce using rule 9
	stream         reduce using rule 9
	int            reduce using rule 9
	if             reduce using rule 9
	lam            reduce using rule 9
	'<'            reduce using rule 9
	'+'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 16
Number of terminals: 25
Number of non-terminals: 3
Number of states: 36
